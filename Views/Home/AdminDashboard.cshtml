
@{
    ViewData["Title"] = "AdminDashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

            .header h1 {
                font-size: 1.5rem;
                font-weight: bold;
            }

            .header button {
                padding: 10px 20px;
                background-color: #dc2626;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }

                .header button:hover {
                    background-color: #b91c1c;
                }

        .stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

            .stats div {
                padding: 20px;
                background-color: white;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .stats p {
                font-size: 1.25rem;
                font-weight: bold;
            }

            .stats .total {
                color: #10b981;
            }

            .stats .available {
                color: #14b8a6;
            }

            .stats .sold {
                color: #3b82f6;
            }

        .table-container {
            margin-bottom: 40px;
        }

            .table-container h2 {
                font-size: 1.25rem;
                font-weight: bold;
                margin-bottom: 10px;
            }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e5e7eb;
            }

            .table th {
                background-color: #f3f4f6;
            }

            .table button {
                background: none;
                border: none;
                color: #3b82f6;
                cursor: pointer;
            }

                .table button.delete {
                    color: #ef4444;
                }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

            .modal.show {
                display: flex;
            }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            max-width: 500px;
            width: 100%;
        }

            .modal-content h2 {
                font-size: 1.25rem;
                font-weight: bold;
                margin-bottom: 20px;
            }

            .modal-content input {
                width: 100%;
                padding: 10px;
                margin-bottom: 10px;
                border: 1px solid #d1d5db;
                border-radius: 5px;
            }

            .modal-content button {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }

            .modal-content .cancel {
                background-color: #e5e7eb;
            }

            .modal-content .submit {
                background-color: #10b981;
                color: white;
            }

                .modal-content .submit:hover {
                    background-color: #059669;
                }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Hello Admin, Admin Dashboard</h1>
            <button onclick="handleLogout()">Logout</button>
        </div>

        <div class="stats">
            <div>
                <p class="total">Total Cars</p>
                <p id="totalCars">0</p>
            </div>
            <div>
                <p class="available">Available Cars</p>
                <p id="availableCars">0</p>
            </div>
            <div>
                <p class="sold">Sold Cars</p>
                <p id="soldCars">0</p>
            </div>
        </div>

        <button onclick="handleAddCarToggle()">Add Car</button>

        <div class="table-container">
            <h2>Available Cars</h2>
            <table class="table" id="availableCarsTable">
                <thead>
                    <tr>
                        <th>Car Name</th>
                        <th>Model</th>
                        <th>Year</th>
                        <th>Location</th>
                        <th>Price</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically inserted here -->
                </tbody>
            </table>
        </div>

        <div class="table-container">
            <h2>Sold Cars</h2>
            <table class="table" id="soldCarsTable">
                <thead>
                    <tr>
                        <th>Car Name</th>
                        <th>Model</th>
                        <th>Year</th>
                        <th>Location</th>
                        <th>Price</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically inserted here -->
                </tbody>
            </table>
        </div>

        <div class="modal" id="addCarModal">
            <div class="modal-content">
                <h2>Add New Car</h2>
                <input type="text" id="newCarName" placeholder="Car Name">
                <input type="text" id="newCarModel" placeholder="Model">
                <input type="number" id="newCarYear" placeholder="Year">
                <input type="text" id="newCarLocation" placeholder="Location">
                <input type="text" id="newCarAddress" placeholder="Address">
                <input type="number" id="newCarPrice" placeholder="Price">
                <input type="text" id="newCarType" placeholder="Type">
                <div>
                    <input type="checkbox" id="newCarSold">
                    <label for="newCarSold">Sold</label>
                </div>
                <input type="text" id="newCarImage" placeholder="Image URL">
                <div>
                    <button class="cancel" onclick="handleAddCarToggle()">Cancel</button>
                    <button class="submit" onclick="handleAddCarSubmit()">Add Car</button>
                </div>
            </div>
        </div>

        <div class="modal" id="editCarModal">
            <div class="modal-content">
                <h2>Edit Car</h2>
                <input type="text" id="editCarName" placeholder="Car Name">
                <input type="text" id="editCarModel" placeholder="Model">
                <input type="number" id="editCarYear" placeholder="Year">
                <input type="text" id="editCarLocation" placeholder="Location">
                <input type="text" id="editCarAddress" placeholder="Address">
                <input type="number" id="editCarPrice" placeholder="Price">
                <input type="text" id="editCarType" placeholder="Type">
                <div>
                    <input type="checkbox" id="editCarSold">
                    <label for="editCarSold">Sold</label>
                </div>
                <input type="text" id="editCarImage" placeholder="Image URL">
                <div>
                    <button class="cancel" onclick="handleEditCarToggle()">Cancel</button>
                    <button class="submit" onclick="handleSaveCar()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let cars = [];
        let editingCar = null;

        async function fetchCars() {
          try {
            const response = await fetch('http://localhost:3001/api/cars');
            cars = await response.json();
            updateCarTables();
          } catch (error) {
            console.error('Error fetching cars:', error);
          }
        }

        function updateCarTables() {
          const availableCarsTable = document.getElementById('availableCarsTable').querySelector('tbody');
          const soldCarsTable = document.getElementById('soldCarsTable').querySelector('tbody');
          availableCarsTable.innerHTML = '';
          soldCarsTable.innerHTML = '';

          const totalCars = cars.length;
          const availableCars = cars.filter(car => !car.sold).length;
          const soldCars = cars.filter(car => car.sold).length;

          document.getElementById('totalCars').textContent = totalCars;
          document.getElementById('availableCars').textContent = availableCars;
          document.getElementById('soldCars').textContent = soldCars;

          cars.forEach(car => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${car.car_name}</td>
              <td>${car.car_model}</td>
              <td>${car.car_year}</td>
              <td>${car.location}</td>
              <td>₹${car.price.toLocaleString()}</td>
              <td>${car.type}</td>
              <td>${car.sold ? 'Sold' : 'Available'}</td>
              <td>
                <button onclick="handleEditCar(${car.id})">Edit</button>
                <button class="delete" onclick="handleDeleteCar(${car.id})">Delete</button>
              </td>
            `;
            if (car.sold) {
              soldCarsTable.appendChild(row);
            } else {
              availableCarsTable.appendChild(row);
            }
          });
        }

        function handleAddCarToggle() {
          document.getElementById('addCarModal').classList.toggle('show');
        }

        async function handleAddCarSubmit() {
          const newCar = {
            car_name: document.getElementById('newCarName').value,
            car_model: document.getElementById('newCarModel').value,
            car_year: document.getElementById('newCarYear').value,
            location: document.getElementById('newCarLocation').value,
            address: document.getElementById('newCarAddress').value,
            price: document.getElementById('newCarPrice').value,
            type: document.getElementById('newCarType').value,
            sold: document.getElementById('newCarSold').checked,
            image: document.getElementById('newCarImage').value,
          };

          if (!validateCar(newCar)) return;

          try {
            const response = await fetch('http://localhost:3001/api/addcar', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(newCar),
            });

            if (response.ok) {
              handleAddCarToggle();
              fetchCars();
            } else {
              const errorData = await response.json();
              alert(`Error adding car: ${errorData.message}`);
            }
          } catch (error) {
            console.error('Error adding car:', error);
            alert('An unexpected error occurred.');
          }
        }

        function handleEditCar(carId) {
          editingCar = cars.find(car => car.id === carId);
          document.getElementById('editCarName').value = editingCar.car_name;
          document.getElementById('editCarModel').value = editingCar.car_model;
          document.getElementById('editCarYear').value = editingCar.car_year;
          document.getElementById('editCarLocation').value = editingCar.location;
          document.getElementById('editCarAddress').value = editingCar.address;
          document.getElementById('editCarPrice').value = editingCar.price;
          document.getElementById('editCarType').value = editingCar.type;
          document.getElementById('editCarSold').checked = editingCar.sold;
          document.getElementById('editCarImage').value = editingCar.image;
          document.getElementById('editCarModal').classList.add('show');
        }

        function handleEditCarToggle() {
          document.getElementById('editCarModal').classList.remove('show');
          editingCar = null;
        }

        async function handleSaveCar() {
          if (!editingCar) return;

          const updatedCar = {
            id: editingCar.id,
            car_name: document.getElementById('editCarName').value,
            car_model: document.getElementById('editCarModel').value,
            car_year: document.getElementById('editCarYear').value,
            location: document.getElementById('editCarLocation').value,
            address: document.getElementById('editCarAddress').value,
            price: document.getElementById('editCarPrice').value,
            type: document.getElementById('editCarType').value,
            sold: document.getElementById('editCarSold').checked,
            image: document.getElementById('editCarImage').value,
          };

          if (!validateCar(updatedCar)) return;

          try {
            const response = await fetch(`http://localhost:3001/api/cars/${updatedCar.id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(updatedCar),
            });

            if (response.ok) {
              handleEditCarToggle();
              fetchCars();
            } else {
              const errorData = await response.json();
              alert(`Error updating car: ${errorData.message}`);
            }
          } catch (error) {
            console.error('Error updating car:', error);
            alert('An unexpected error occurred.');
          }
        }

        async function handleDeleteCar(carId) {
          const confirmDelete = confirm('Are you sure you want to delete this car?');
          if (confirmDelete) {
            try {
              const response = await fetch(`http://localhost:3001/api/cars/${carId}`, {
                method: 'DELETE',
              });

              if (response.ok) {
                fetchCars();
              } else {
                const errorData = await response.json();
                alert(`Error deleting car: ${errorData.message}`);
              }
            } catch (error) {
              console.error('Error deleting car:', error);
              alert('An unexpected error occurred.');
            }
          }
        }

        function handleLogout() {
          // Implement logout functionality
          alert('Logout functionality not implemented.');
        }

        function validateCar(car) {
          if (car.car_name.length > 50) {
            alert("Car name cannot be more than 50 characters.");
            return false;
          }

          const currentYear = new Date().getFullYear();
          if (car.car_year < 1900 || car.car_year > currentYear) {
            alert("Car year must be between 1900 and the current year.");
            return false;
          }

          const imageUrlPattern = /^(https?:\/\/.*\.(?:png|jpg|jpeg|gif|bmp|webp)|.*)$/i;
          if (!imageUrlPattern.test(car.image)) {
            alert("Image URL must be a valid URL.");
            return false;
          }

          return true;
        }

        fetchCars();
    </script>
</body>
</html>


